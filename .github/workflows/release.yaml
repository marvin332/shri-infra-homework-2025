name: Release

on:
  workflow_dispatch:

jobs:
  lint-and-test:
    name: ðŸ§¹ Lint & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test

  release:
    name: ðŸš€ Release
    needs: lint-and-test
    runs-on: ubuntu-latest
    env:
      REGISTRY_ID: ${{ secrets.REGISTRY_ID }}
      VERSION: ${{ github.run_number }}
    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags

      - name: Determine previous tag & commits
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0)
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

          COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:'- %s')
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$COMMITS"      >> $GITHUB_ENV
          echo "EOF"           >> $GITHUB_ENV

      - name: Create release branch
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b releases/${VERSION}
          git push origin releases/${VERSION}

      - name: Install jq & YC-CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          export PATH="$HOME/.local/bin:$PATH"

      - name: Configure Yandex.Cloud CLI
        run: |
          echo "${{ secrets.YC_SERVICE_KEY }}" > key.json
          CLOUD_ID=$(jq -r .cloud_id key.json)
          FOLDER_ID=$(jq -r .folder_id key.json)
          yc init --service-account-key-file key.json \
                  --cloud-id "$CLOUD_ID" \
                  --folder-id "$FOLDER_ID" \
                  --no-interactive

      - name: Docker login
        run: |
          TOKEN=$(yc iam create-token)
          echo "$TOKEN" | docker login cr.yandex -u oauth --password-stdin

      - name: Build & Push Docker images
        run: |
          docker build -t cr.yandex/${REGISTRY_ID}/app:${VERSION} .
          docker tag cr.yandex/${REGISTRY_ID}/app:${VERSION} \
                     cr.yandex/${REGISTRY_ID}/app:${VERSION}_latest
          docker push cr.yandex/${REGISTRY_ID}/app:${VERSION}
          docker push cr.yandex/${REGISTRY_ID}/app:${VERSION}_latest

      - name: Create git tag
        run: |
          git tag -a "${VERSION}" -m "Release ${VERSION}"
          git push origin "${VERSION}"

      - name: Update CHANGELOG.md
        run: |
          DATE=$(date -u +"%Y-%m-%d")
          { 
            echo "## ${VERSION} - ${DATE}"
            echo ""
            echo "${COMMITS}"
            echo ""
            cat CHANGELOG.md
          } > CHANGELOG.tmp
          mv CHANGELOG.tmp CHANGELOG.md
          git add CHANGELOG.md
          git commit -m "chore: update CHANGELOG for release ${VERSION}"
          git push origin releases/${VERSION}

      - name: Create Release Issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version  = process.env.VERSION;
            const date     = new Date().toISOString().split('T')[0];
            const author   = context.actor;
            const prevTag  = process.env.PREV_TAG;
            const commits  = process.env.COMMITS;
            const registry = process.env.REGISTRY_ID;
            const image    = `cr.yandex/${registry}/app:${version}`;

            await github.issues.create({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              title: `Release ${version} deployed`,
              body: `**Date:** ${date}
              **Author:** @${author}
              **Version:** ${version}
  
            **Commits since ${prevTag}:**
            ${commits}
  
            **Docker image:** ${image}`
            });
